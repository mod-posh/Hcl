//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Hcl.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class HclLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, BOOL=4, STRING=5, NUMBER=6, IDENTIFIER=7, COMMENT=8, 
		WHITESPACE=9, EQUAL=10, OPEN_BRACE=11, CLOSE_BRACE=12, OPEN_BRACKET=13, 
		CLOSE_BRACKET=14, OPEN_PAREN=15, CLOSE_PAREN=16, COMMA=17, NEWLINE=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "BOOL", "STRING", "NUMBER", "IDENTIFIER", "COMMENT", 
		"WHITESPACE", "EQUAL", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_PAREN", "CLOSE_PAREN", "COMMA", "NEWLINE"
	};


	public HclLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HclLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'${'", "'.'", "'*'", null, null, null, null, null, null, "'='", 
		"'{'", "'}'", "'['", "']'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "BOOL", "STRING", "NUMBER", "IDENTIFIER", "COMMENT", 
		"WHITESPACE", "EQUAL", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_PAREN", "CLOSE_PAREN", "COMMA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hcl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HclLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,125,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,54,8,3,1,4,1,4,1,4,1,4,5,4,60,8,4,10,4,
		12,4,63,9,4,1,4,1,4,1,5,4,5,68,8,5,11,5,12,5,69,1,5,1,5,4,5,74,8,5,11,
		5,12,5,75,3,5,78,8,5,1,6,1,6,5,6,82,8,6,10,6,12,6,85,9,6,1,7,1,7,5,7,89,
		8,7,10,7,12,7,92,9,7,1,7,1,7,1,8,4,8,97,8,8,11,8,12,8,98,1,8,1,8,1,9,1,
		9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
		1,17,4,17,120,8,17,11,17,12,17,121,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,1,0,6,2,0,34,34,92,92,1,0,48,57,3,0,65,90,95,95,97,122,5,0,45,45,
		48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,134,0,1,
		1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
		0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		0,35,1,0,0,0,1,37,1,0,0,0,3,40,1,0,0,0,5,42,1,0,0,0,7,53,1,0,0,0,9,55,
		1,0,0,0,11,67,1,0,0,0,13,79,1,0,0,0,15,86,1,0,0,0,17,96,1,0,0,0,19,102,
		1,0,0,0,21,104,1,0,0,0,23,106,1,0,0,0,25,108,1,0,0,0,27,110,1,0,0,0,29,
		112,1,0,0,0,31,114,1,0,0,0,33,116,1,0,0,0,35,119,1,0,0,0,37,38,5,36,0,
		0,38,39,5,123,0,0,39,2,1,0,0,0,40,41,5,46,0,0,41,4,1,0,0,0,42,43,5,42,
		0,0,43,6,1,0,0,0,44,45,5,116,0,0,45,46,5,114,0,0,46,47,5,117,0,0,47,54,
		5,101,0,0,48,49,5,102,0,0,49,50,5,97,0,0,50,51,5,108,0,0,51,52,5,115,0,
		0,52,54,5,101,0,0,53,44,1,0,0,0,53,48,1,0,0,0,54,8,1,0,0,0,55,61,5,34,
		0,0,56,60,8,0,0,0,57,58,5,92,0,0,58,60,9,0,0,0,59,56,1,0,0,0,59,57,1,0,
		0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,61,1,0,
		0,0,64,65,5,34,0,0,65,10,1,0,0,0,66,68,7,1,0,0,67,66,1,0,0,0,68,69,1,0,
		0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,77,1,0,0,0,71,73,5,46,0,0,72,74,7,1,
		0,0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,
		0,0,77,71,1,0,0,0,77,78,1,0,0,0,78,12,1,0,0,0,79,83,7,2,0,0,80,82,7,3,
		0,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,14,1,0,
		0,0,85,83,1,0,0,0,86,90,5,35,0,0,87,89,8,4,0,0,88,87,1,0,0,0,89,92,1,0,
		0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,90,1,0,0,0,93,94,6,7,
		0,0,94,16,1,0,0,0,95,97,7,5,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,
		0,0,98,99,1,0,0,0,99,100,1,0,0,0,100,101,6,8,0,0,101,18,1,0,0,0,102,103,
		5,61,0,0,103,20,1,0,0,0,104,105,5,123,0,0,105,22,1,0,0,0,106,107,5,125,
		0,0,107,24,1,0,0,0,108,109,5,91,0,0,109,26,1,0,0,0,110,111,5,93,0,0,111,
		28,1,0,0,0,112,113,5,40,0,0,113,30,1,0,0,0,114,115,5,41,0,0,115,32,1,0,
		0,0,116,117,5,44,0,0,117,34,1,0,0,0,118,120,7,4,0,0,119,118,1,0,0,0,120,
		121,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,6,
		17,0,0,124,36,1,0,0,0,11,0,53,59,61,69,75,77,83,90,98,121,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
