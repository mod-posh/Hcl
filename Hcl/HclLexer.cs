//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Hcl.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class HclLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, PORT_RANGE=4, BOOL=5, STRING=6, NUMBER=7, IDENTIFIER=8, 
		COMMENT=9, WHITESPACE=10, EQUAL=11, OPEN_BRACE=12, CLOSE_BRACE=13, OPEN_BRACKET=14, 
		CLOSE_BRACKET=15, OPEN_PAREN=16, CLOSE_PAREN=17, COMMA=18, NEWLINE=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "PORT_RANGE", "BOOL", "STRING", "NUMBER", "IDENTIFIER", 
		"COMMENT", "WHITESPACE", "EQUAL", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "NEWLINE"
	};


	public HclLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HclLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'${'", "'.'", "'*'", null, null, null, null, null, null, null, 
		"'='", "'{'", "'}'", "'['", "']'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "PORT_RANGE", "BOOL", "STRING", "NUMBER", "IDENTIFIER", 
		"COMMENT", "WHITESPACE", "EQUAL", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hcl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HclLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,131,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,1,1,1,1,2,1,
		2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,60,8,4,1,5,1,
		5,1,5,1,5,5,5,66,8,5,10,5,12,5,69,9,5,1,5,1,5,1,6,4,6,74,8,6,11,6,12,6,
		75,1,6,1,6,4,6,80,8,6,11,6,12,6,81,3,6,84,8,6,1,7,1,7,5,7,88,8,7,10,7,
		12,7,91,9,7,1,8,1,8,5,8,95,8,8,10,8,12,8,98,9,8,1,8,1,8,1,9,4,9,103,8,
		9,11,9,12,9,104,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
		14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,4,18,126,8,18,11,18,12,18,127,1,
		18,1,18,0,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,1,0,6,2,0,34,34,92,92,1,0,
		48,57,3,0,65,90,95,95,97,122,5,0,45,45,48,57,65,90,95,95,97,122,2,0,10,
		10,13,13,3,0,9,10,13,13,32,32,140,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,
		1,0,0,0,3,42,1,0,0,0,5,44,1,0,0,0,7,46,1,0,0,0,9,59,1,0,0,0,11,61,1,0,
		0,0,13,73,1,0,0,0,15,85,1,0,0,0,17,92,1,0,0,0,19,102,1,0,0,0,21,108,1,
		0,0,0,23,110,1,0,0,0,25,112,1,0,0,0,27,114,1,0,0,0,29,116,1,0,0,0,31,118,
		1,0,0,0,33,120,1,0,0,0,35,122,1,0,0,0,37,125,1,0,0,0,39,40,5,36,0,0,40,
		41,5,123,0,0,41,2,1,0,0,0,42,43,5,46,0,0,43,4,1,0,0,0,44,45,5,42,0,0,45,
		6,1,0,0,0,46,47,3,13,6,0,47,48,5,45,0,0,48,49,3,13,6,0,49,8,1,0,0,0,50,
		51,5,116,0,0,51,52,5,114,0,0,52,53,5,117,0,0,53,60,5,101,0,0,54,55,5,102,
		0,0,55,56,5,97,0,0,56,57,5,108,0,0,57,58,5,115,0,0,58,60,5,101,0,0,59,
		50,1,0,0,0,59,54,1,0,0,0,60,10,1,0,0,0,61,67,5,34,0,0,62,66,8,0,0,0,63,
		64,5,92,0,0,64,66,9,0,0,0,65,62,1,0,0,0,65,63,1,0,0,0,66,69,1,0,0,0,67,
		65,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,67,1,0,0,0,70,71,5,34,0,0,71,
		12,1,0,0,0,72,74,7,1,0,0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,
		76,1,0,0,0,76,83,1,0,0,0,77,79,5,46,0,0,78,80,7,1,0,0,79,78,1,0,0,0,80,
		81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,84,1,0,0,0,83,77,1,0,0,0,83,
		84,1,0,0,0,84,14,1,0,0,0,85,89,7,2,0,0,86,88,7,3,0,0,87,86,1,0,0,0,88,
		91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,16,1,0,0,0,91,89,1,0,0,0,92,
		96,5,35,0,0,93,95,8,4,0,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,
		97,1,0,0,0,97,99,1,0,0,0,98,96,1,0,0,0,99,100,6,8,0,0,100,18,1,0,0,0,101,
		103,7,5,0,0,102,101,1,0,0,0,103,104,1,0,0,0,104,102,1,0,0,0,104,105,1,
		0,0,0,105,106,1,0,0,0,106,107,6,9,0,0,107,20,1,0,0,0,108,109,5,61,0,0,
		109,22,1,0,0,0,110,111,5,123,0,0,111,24,1,0,0,0,112,113,5,125,0,0,113,
		26,1,0,0,0,114,115,5,91,0,0,115,28,1,0,0,0,116,117,5,93,0,0,117,30,1,0,
		0,0,118,119,5,40,0,0,119,32,1,0,0,0,120,121,5,41,0,0,121,34,1,0,0,0,122,
		123,5,44,0,0,123,36,1,0,0,0,124,126,7,4,0,0,125,124,1,0,0,0,126,127,1,
		0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,130,6,18,0,0,
		130,38,1,0,0,0,11,0,59,65,67,75,81,83,89,96,104,127,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
