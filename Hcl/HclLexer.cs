//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Hcl.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class HclLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, BOOL=3, STRING=4, NUMBER=5, IDENTIFIER=6, COMMENT=7, WHITESPACE=8, 
		EQUAL=9, OPEN_BRACE=10, CLOSE_BRACE=11, OPEN_BRACKET=12, CLOSE_BRACKET=13, 
		OPEN_PAREN=14, CLOSE_PAREN=15, COMMA=16, NEWLINE=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "BOOL", "STRING", "NUMBER", "IDENTIFIER", "COMMENT", "WHITESPACE", 
		"EQUAL", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_PAREN", "CLOSE_PAREN", "COMMA", "NEWLINE"
	};


	public HclLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HclLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'${'", "'.'", null, null, null, null, null, null, "'='", "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "BOOL", "STRING", "NUMBER", "IDENTIFIER", "COMMENT", 
		"WHITESPACE", "EQUAL", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_PAREN", "CLOSE_PAREN", "COMMA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hcl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HclLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,17,121,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,3,2,50,8,2,1,3,1,3,1,3,1,3,5,3,56,8,3,10,3,12,3,59,9,3,1,3,1,
		3,1,4,4,4,64,8,4,11,4,12,4,65,1,4,1,4,4,4,70,8,4,11,4,12,4,71,3,4,74,8,
		4,1,5,1,5,5,5,78,8,5,10,5,12,5,81,9,5,1,6,1,6,5,6,85,8,6,10,6,12,6,88,
		9,6,1,6,1,6,1,7,4,7,93,8,7,11,7,12,7,94,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
		10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,4,16,116,8,16,
		11,16,12,16,117,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,6,2,0,34,34,92,92,
		1,0,48,57,3,0,65,90,95,95,97,122,5,0,45,45,48,57,65,90,95,95,97,122,2,
		0,10,10,13,13,3,0,9,10,13,13,32,32,130,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
		0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,38,1,0,0,0,5,49,
		1,0,0,0,7,51,1,0,0,0,9,63,1,0,0,0,11,75,1,0,0,0,13,82,1,0,0,0,15,92,1,
		0,0,0,17,98,1,0,0,0,19,100,1,0,0,0,21,102,1,0,0,0,23,104,1,0,0,0,25,106,
		1,0,0,0,27,108,1,0,0,0,29,110,1,0,0,0,31,112,1,0,0,0,33,115,1,0,0,0,35,
		36,5,36,0,0,36,37,5,123,0,0,37,2,1,0,0,0,38,39,5,46,0,0,39,4,1,0,0,0,40,
		41,5,116,0,0,41,42,5,114,0,0,42,43,5,117,0,0,43,50,5,101,0,0,44,45,5,102,
		0,0,45,46,5,97,0,0,46,47,5,108,0,0,47,48,5,115,0,0,48,50,5,101,0,0,49,
		40,1,0,0,0,49,44,1,0,0,0,50,6,1,0,0,0,51,57,5,34,0,0,52,56,8,0,0,0,53,
		54,5,92,0,0,54,56,9,0,0,0,55,52,1,0,0,0,55,53,1,0,0,0,56,59,1,0,0,0,57,
		55,1,0,0,0,57,58,1,0,0,0,58,60,1,0,0,0,59,57,1,0,0,0,60,61,5,34,0,0,61,
		8,1,0,0,0,62,64,7,1,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,
		1,0,0,0,66,73,1,0,0,0,67,69,5,46,0,0,68,70,7,1,0,0,69,68,1,0,0,0,70,71,
		1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,67,1,0,0,0,73,74,
		1,0,0,0,74,10,1,0,0,0,75,79,7,2,0,0,76,78,7,3,0,0,77,76,1,0,0,0,78,81,
		1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,12,1,0,0,0,81,79,1,0,0,0,82,86,
		5,35,0,0,83,85,8,4,0,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,
		1,0,0,0,87,89,1,0,0,0,88,86,1,0,0,0,89,90,6,6,0,0,90,14,1,0,0,0,91,93,
		7,5,0,0,92,91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,96,
		1,0,0,0,96,97,6,7,0,0,97,16,1,0,0,0,98,99,5,61,0,0,99,18,1,0,0,0,100,101,
		5,123,0,0,101,20,1,0,0,0,102,103,5,125,0,0,103,22,1,0,0,0,104,105,5,91,
		0,0,105,24,1,0,0,0,106,107,5,93,0,0,107,26,1,0,0,0,108,109,5,40,0,0,109,
		28,1,0,0,0,110,111,5,41,0,0,111,30,1,0,0,0,112,113,5,44,0,0,113,32,1,0,
		0,0,114,116,7,4,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,
		118,1,0,0,0,118,119,1,0,0,0,119,120,6,16,0,0,120,34,1,0,0,0,11,0,49,55,
		57,65,71,73,79,86,94,117,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
