//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Hcl.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class HclParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, BOOL=4, STRING=5, NUMBER=6, PORT_RANGE=7, IDENTIFIER=8, 
		COMMENT=9, WHITESPACE=10, EQUAL=11, OPEN_BRACE=12, CLOSE_BRACE=13, OPEN_BRACKET=14, 
		CLOSE_BRACKET=15, OPEN_PAREN=16, CLOSE_PAREN=17, COMMA=18, NEWLINE=19;
	public const int
		RULE_document = 0, RULE_block = 1, RULE_blockLabel = 2, RULE_body = 3, 
		RULE_attribute = 4, RULE_nestedBlock = 5, RULE_indexedAttribute = 6, RULE_list = 7, 
		RULE_map = 8, RULE_mapEntry = 9, RULE_mapKey = 10, RULE_value = 11, RULE_interpolation = 12, 
		RULE_reference = 13, RULE_indexedReference = 14, RULE_functionCall = 15, 
		RULE_expression = 16;
	public static readonly string[] ruleNames = {
		"document", "block", "blockLabel", "body", "attribute", "nestedBlock", 
		"indexedAttribute", "list", "map", "mapEntry", "mapKey", "value", "interpolation", 
		"reference", "indexedReference", "functionCall", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'${'", "'.'", "'*'", null, null, null, null, null, null, null, 
		"'='", "'{'", "'}'", "'['", "']'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "BOOL", "STRING", "NUMBER", "PORT_RANGE", "IDENTIFIER", 
		"COMMENT", "WHITESPACE", "EQUAL", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hcl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HclParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HclParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HclParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HclParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 34;
				block();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(HclParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockLabelContext blockLabel() {
			return GetRuleContext<BlockLabelContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(IDENTIFIER);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 43;
				blockLabel();
				}
			}

			State = 46;
			Match(OPEN_BRACE);
			State = 47;
			body();
			State = 48;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(HclParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(HclParser.STRING, i);
		}
		public BlockLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterBlockLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitBlockLabel(this);
		}
	}

	[RuleVersion(0)]
	public BlockLabelContext blockLabel() {
		BlockLabelContext _localctx = new BlockLabelContext(Context, State);
		EnterRule(_localctx, 4, RULE_blockLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 50;
				Match(STRING);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedBlockContext[] nestedBlock() {
			return GetRuleContexts<NestedBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedBlockContext nestedBlock(int i) {
			return GetRuleContext<NestedBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(HclParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(HclParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(HclParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(HclParser.NEWLINE, i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 525056L) != 0)) {
				{
				State = 59;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 55;
					attribute();
					}
					break;
				case 2:
					{
					State = 56;
					nestedBlock();
					}
					break;
				case 3:
					{
					State = 57;
					Match(COMMENT);
					}
					break;
				case 4:
					{
					State = 58;
					Match(NEWLINE);
					}
					break;
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HclParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(IDENTIFIER);
			State = 65;
			Match(EQUAL);
			State = 66;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(HclParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockLabelContext blockLabel() {
			return GetRuleContext<BlockLabelContext>(0);
		}
		public NestedBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterNestedBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitNestedBlock(this);
		}
	}

	[RuleVersion(0)]
	public NestedBlockContext nestedBlock() {
		NestedBlockContext _localctx = new NestedBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_nestedBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(IDENTIFIER);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 69;
				blockLabel();
				}
			}

			State = 72;
			Match(OPEN_BRACE);
			State = 73;
			body();
			State = 74;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(HclParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(HclParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(HclParser.NUMBER, 0); }
		public IndexedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterIndexedAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitIndexedAttribute(this);
		}
	}

	[RuleVersion(0)]
	public IndexedAttributeContext indexedAttribute() {
		IndexedAttributeContext _localctx = new IndexedAttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_indexedAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(IDENTIFIER);
			State = 77;
			Match(OPEN_BRACKET);
			State = 78;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 79;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(HclParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(HclParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext[] indexedAttribute() {
			return GetRuleContexts<IndexedAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext indexedAttribute(int i) {
			return GetRuleContext<IndexedAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedReferenceContext[] indexedReference() {
			return GetRuleContexts<IndexedReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedReferenceContext indexedReference(int i) {
			return GetRuleContext<IndexedReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PORT_RANGE() { return GetTokens(HclParser.PORT_RANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_RANGE(int i) {
			return GetToken(HclParser.PORT_RANGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HclParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HclParser.COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 14, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(OPEN_BRACKET);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 20978L) != 0)) {
				{
				State = 87;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 82;
					value();
					}
					break;
				case 2:
					{
					State = 83;
					indexedAttribute();
					}
					break;
				case 3:
					{
					State = 84;
					reference();
					}
					break;
				case 4:
					{
					State = 85;
					indexedReference();
					}
					break;
				case 5:
					{
					State = 86;
					Match(PORT_RANGE);
					}
					break;
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 89;
					Match(COMMA);
					State = 95;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 90;
						value();
						}
						break;
					case 2:
						{
						State = 91;
						indexedAttribute();
						}
						break;
					case 3:
						{
						State = 92;
						reference();
						}
						break;
					case 4:
						{
						State = 93;
						indexedReference();
						}
						break;
					case 5:
						{
						State = 94;
						Match(PORT_RANGE);
						}
						break;
					}
					}
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 104;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(HclParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapEntryContext[] mapEntry() {
			return GetRuleContexts<MapEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapEntryContext mapEntry(int i) {
			return GetRuleContext<MapEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HclParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HclParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(HclParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(HclParser.NEWLINE, i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 16, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(OPEN_BRACE);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING || _la==IDENTIFIER) {
				{
				{
				State = 107;
				mapEntry();
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA || _la==NEWLINE) {
					{
					{
					State = 108;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==NEWLINE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapKeyContext mapKey() {
			return GetRuleContext<MapKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HclParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public MapEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMapEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMapEntry(this);
		}
	}

	[RuleVersion(0)]
	public MapEntryContext mapEntry() {
		MapEntryContext _localctx = new MapEntryContext(Context, State);
		EnterRule(_localctx, 18, RULE_mapEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			mapKey();
			State = 122;
			Match(EQUAL);
			State = 123;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext indexedAttribute() {
			return GetRuleContext<IndexedAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public MapKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMapKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMapKey(this);
		}
	}

	[RuleVersion(0)]
	public MapKeyContext mapKey() {
		MapKeyContext _localctx = new MapKeyContext(Context, State);
		EnterRule(_localctx, 20, RULE_mapKey);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127;
				indexedAttribute();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 128;
				reference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(HclParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(HclParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_RANGE() { return GetToken(HclParser.PORT_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedReferenceContext indexedReference() {
			return GetRuleContext<IndexedReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolationContext interpolation() {
			return GetRuleContext<InterpolationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				Match(BOOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				Match(STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				Match(NUMBER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134;
				Match(PORT_RANGE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135;
				list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 136;
				map();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 137;
				reference();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 138;
				indexedReference();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 139;
				interpolation();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 140;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		public InterpolationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterInterpolation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitInterpolation(this);
		}
	}

	[RuleVersion(0)]
	public InterpolationContext interpolation() {
		InterpolationContext _localctx = new InterpolationContext(Context, State);
		EnterRule(_localctx, 24, RULE_interpolation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(T__0);
			State = 144;
			expression();
			State = 145;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HclParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HclParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(HclParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(HclParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(HclParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(HclParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(HclParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(HclParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(HclParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(HclParser.NUMBER, i);
		}
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(IDENTIFIER);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				State = 157;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 148;
					Match(T__1);
					State = 149;
					Match(IDENTIFIER);
					}
					break;
				case 2:
					{
					State = 150;
					Match(T__1);
					State = 151;
					Match(T__2);
					}
					break;
				case 3:
					{
					State = 152;
					Match(T__1);
					State = 153;
					Match(IDENTIFIER);
					State = 154;
					Match(OPEN_BRACKET);
					State = 155;
					_la = TokenStream.LA(1);
					if ( !(_la==STRING || _la==NUMBER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 156;
					Match(CLOSE_BRACKET);
					}
					break;
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HclParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HclParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(HclParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(HclParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(HclParser.NUMBER, 0); }
		public IndexedReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterIndexedReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitIndexedReference(this);
		}
	}

	[RuleVersion(0)]
	public IndexedReferenceContext indexedReference() {
		IndexedReferenceContext _localctx = new IndexedReferenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_indexedReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(IDENTIFIER);
			State = 163;
			Match(OPEN_BRACKET);
			State = 164;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 165;
			Match(CLOSE_BRACKET);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 166;
				Match(T__1);
				State = 167;
				Match(IDENTIFIER);
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(HclParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(HclParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HclParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HclParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(IDENTIFIER);
			State = 174;
			Match(OPEN_PAREN);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 20978L) != 0)) {
				{
				State = 175;
				value();
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 176;
					Match(COMMA);
					State = 177;
					value();
					}
					}
					State = 182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 185;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_expression);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				reference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188;
				functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 189;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,19,193,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,0,1,0,1,1,1,1,3,
		1,45,8,1,1,1,1,1,1,1,1,1,1,2,4,2,52,8,2,11,2,12,2,53,1,3,1,3,1,3,1,3,5,
		3,60,8,3,10,3,12,3,63,9,3,1,4,1,4,1,4,1,4,1,5,1,5,3,5,71,8,5,1,5,1,5,1,
		5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,88,8,7,1,7,1,7,1,
		7,1,7,1,7,1,7,3,7,96,8,7,5,7,98,8,7,10,7,12,7,101,9,7,3,7,103,8,7,1,7,
		1,7,1,8,1,8,1,8,5,8,110,8,8,10,8,12,8,113,9,8,5,8,115,8,8,10,8,12,8,118,
		9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,130,8,10,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,142,8,11,1,12,1,12,1,12,1,
		12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,158,8,13,10,
		13,12,13,161,9,13,1,14,1,14,1,14,1,14,1,14,1,14,5,14,169,8,14,10,14,12,
		14,172,9,14,1,15,1,15,1,15,1,15,1,15,5,15,179,8,15,10,15,12,15,182,9,15,
		3,15,184,8,15,1,15,1,15,1,16,1,16,1,16,3,16,191,8,16,1,16,0,0,17,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,3,1,0,5,6,1,0,18,19,2,0,3,3,
		5,6,215,0,37,1,0,0,0,2,42,1,0,0,0,4,51,1,0,0,0,6,61,1,0,0,0,8,64,1,0,0,
		0,10,68,1,0,0,0,12,76,1,0,0,0,14,81,1,0,0,0,16,106,1,0,0,0,18,121,1,0,
		0,0,20,129,1,0,0,0,22,141,1,0,0,0,24,143,1,0,0,0,26,147,1,0,0,0,28,162,
		1,0,0,0,30,173,1,0,0,0,32,190,1,0,0,0,34,36,3,2,1,0,35,34,1,0,0,0,36,39,
		1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,40,1,0,0,0,39,37,1,0,0,0,40,41,
		5,0,0,1,41,1,1,0,0,0,42,44,5,8,0,0,43,45,3,4,2,0,44,43,1,0,0,0,44,45,1,
		0,0,0,45,46,1,0,0,0,46,47,5,12,0,0,47,48,3,6,3,0,48,49,5,13,0,0,49,3,1,
		0,0,0,50,52,5,5,0,0,51,50,1,0,0,0,52,53,1,0,0,0,53,51,1,0,0,0,53,54,1,
		0,0,0,54,5,1,0,0,0,55,60,3,8,4,0,56,60,3,10,5,0,57,60,5,9,0,0,58,60,5,
		19,0,0,59,55,1,0,0,0,59,56,1,0,0,0,59,57,1,0,0,0,59,58,1,0,0,0,60,63,1,
		0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,7,1,0,0,0,63,61,1,0,0,0,64,65,5,8,
		0,0,65,66,5,11,0,0,66,67,3,22,11,0,67,9,1,0,0,0,68,70,5,8,0,0,69,71,3,
		4,2,0,70,69,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,73,5,12,0,0,73,74,3,
		6,3,0,74,75,5,13,0,0,75,11,1,0,0,0,76,77,5,8,0,0,77,78,5,14,0,0,78,79,
		7,0,0,0,79,80,5,15,0,0,80,13,1,0,0,0,81,102,5,14,0,0,82,88,3,22,11,0,83,
		88,3,12,6,0,84,88,3,26,13,0,85,88,3,28,14,0,86,88,5,7,0,0,87,82,1,0,0,
		0,87,83,1,0,0,0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,0,0,0,88,99,1,0,0,
		0,89,95,5,18,0,0,90,96,3,22,11,0,91,96,3,12,6,0,92,96,3,26,13,0,93,96,
		3,28,14,0,94,96,5,7,0,0,95,90,1,0,0,0,95,91,1,0,0,0,95,92,1,0,0,0,95,93,
		1,0,0,0,95,94,1,0,0,0,96,98,1,0,0,0,97,89,1,0,0,0,98,101,1,0,0,0,99,97,
		1,0,0,0,99,100,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,102,87,1,0,0,0,102,
		103,1,0,0,0,103,104,1,0,0,0,104,105,5,15,0,0,105,15,1,0,0,0,106,116,5,
		12,0,0,107,111,3,18,9,0,108,110,7,1,0,0,109,108,1,0,0,0,110,113,1,0,0,
		0,111,109,1,0,0,0,111,112,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,114,
		107,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,119,1,
		0,0,0,118,116,1,0,0,0,119,120,5,13,0,0,120,17,1,0,0,0,121,122,3,20,10,
		0,122,123,5,11,0,0,123,124,3,22,11,0,124,19,1,0,0,0,125,130,5,5,0,0,126,
		130,5,8,0,0,127,130,3,12,6,0,128,130,3,26,13,0,129,125,1,0,0,0,129,126,
		1,0,0,0,129,127,1,0,0,0,129,128,1,0,0,0,130,21,1,0,0,0,131,142,5,4,0,0,
		132,142,5,5,0,0,133,142,5,6,0,0,134,142,5,7,0,0,135,142,3,14,7,0,136,142,
		3,16,8,0,137,142,3,26,13,0,138,142,3,28,14,0,139,142,3,24,12,0,140,142,
		3,30,15,0,141,131,1,0,0,0,141,132,1,0,0,0,141,133,1,0,0,0,141,134,1,0,
		0,0,141,135,1,0,0,0,141,136,1,0,0,0,141,137,1,0,0,0,141,138,1,0,0,0,141,
		139,1,0,0,0,141,140,1,0,0,0,142,23,1,0,0,0,143,144,5,1,0,0,144,145,3,32,
		16,0,145,146,5,13,0,0,146,25,1,0,0,0,147,159,5,8,0,0,148,149,5,2,0,0,149,
		158,5,8,0,0,150,151,5,2,0,0,151,158,5,3,0,0,152,153,5,2,0,0,153,154,5,
		8,0,0,154,155,5,14,0,0,155,156,7,0,0,0,156,158,5,15,0,0,157,148,1,0,0,
		0,157,150,1,0,0,0,157,152,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,
		160,1,0,0,0,160,27,1,0,0,0,161,159,1,0,0,0,162,163,5,8,0,0,163,164,5,14,
		0,0,164,165,7,2,0,0,165,170,5,15,0,0,166,167,5,2,0,0,167,169,5,8,0,0,168,
		166,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,29,1,0,
		0,0,172,170,1,0,0,0,173,174,5,8,0,0,174,183,5,16,0,0,175,180,3,22,11,0,
		176,177,5,18,0,0,177,179,3,22,11,0,178,176,1,0,0,0,179,182,1,0,0,0,180,
		178,1,0,0,0,180,181,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,183,175,1,
		0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,186,5,17,0,0,186,31,1,0,0,0,
		187,191,3,26,13,0,188,191,3,30,15,0,189,191,3,22,11,0,190,187,1,0,0,0,
		190,188,1,0,0,0,190,189,1,0,0,0,191,33,1,0,0,0,20,37,44,53,59,61,70,87,
		95,99,102,111,116,129,141,157,159,170,180,183,190
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
