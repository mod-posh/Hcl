//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Hcl.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class HclParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, BOOL=3, STRING=4, NUMBER=5, IDENTIFIER=6, COMMENT=7, WHITESPACE=8, 
		EQUAL=9, OPEN_BRACE=10, CLOSE_BRACE=11, OPEN_BRACKET=12, CLOSE_BRACKET=13, 
		OPEN_PAREN=14, CLOSE_PAREN=15, COMMA=16, NEWLINE=17;
	public const int
		RULE_document = 0, RULE_block = 1, RULE_body = 2, RULE_attribute = 3, 
		RULE_indexedAttribute = 4, RULE_nestedBlock = 5, RULE_list = 6, RULE_map = 7, 
		RULE_mapEntry = 8, RULE_mapKey = 9, RULE_value = 10, RULE_interpolation = 11, 
		RULE_reference = 12, RULE_indexedReference = 13, RULE_functionCall = 14, 
		RULE_expression = 15;
	public static readonly string[] ruleNames = {
		"document", "block", "body", "attribute", "indexedAttribute", "nestedBlock", 
		"list", "map", "mapEntry", "mapKey", "value", "interpolation", "reference", 
		"indexedReference", "functionCall", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'${'", "'.'", null, null, null, null, null, null, "'='", "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "BOOL", "STRING", "NUMBER", "IDENTIFIER", "COMMENT", 
		"WHITESPACE", "EQUAL", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_PAREN", "CLOSE_PAREN", "COMMA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hcl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HclParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HclParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HclParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HclParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 32;
				block();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(HclParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(HclParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(HclParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(IDENTIFIER);
			State = 41;
			Match(STRING);
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 42;
				Match(STRING);
				}
			}

			State = 45;
			Match(OPEN_BRACE);
			State = 46;
			body();
			State = 47;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedBlockContext[] nestedBlock() {
			return GetRuleContexts<NestedBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedBlockContext nestedBlock(int i) {
			return GetRuleContext<NestedBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(HclParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(HclParser.COMMENT, i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER || _la==COMMENT) {
				{
				State = 52;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 49;
					attribute();
					}
					break;
				case 2:
					{
					State = 50;
					nestedBlock();
					}
					break;
				case 3:
					{
					State = 51;
					Match(COMMENT);
					}
					break;
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HclParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext indexedAttribute() {
			return GetRuleContext<IndexedAttributeContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				Match(IDENTIFIER);
				State = 58;
				Match(EQUAL);
				State = 59;
				value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				Match(IDENTIFIER);
				State = 61;
				Match(EQUAL);
				State = 62;
				map();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63;
				indexedAttribute();
				State = 64;
				Match(EQUAL);
				State = 65;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(HclParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(HclParser.CLOSE_BRACKET, 0); }
		public IndexedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterIndexedAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitIndexedAttribute(this);
		}
	}

	[RuleVersion(0)]
	public IndexedAttributeContext indexedAttribute() {
		IndexedAttributeContext _localctx = new IndexedAttributeContext(Context, State);
		EnterRule(_localctx, 8, RULE_indexedAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(IDENTIFIER);
			State = 70;
			Match(OPEN_BRACKET);
			State = 71;
			Match(STRING);
			State = 72;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(HclParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		public NestedBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterNestedBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitNestedBlock(this);
		}
	}

	[RuleVersion(0)]
	public NestedBlockContext nestedBlock() {
		NestedBlockContext _localctx = new NestedBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_nestedBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(IDENTIFIER);
			State = 75;
			Match(OPEN_BRACE);
			State = 76;
			body();
			State = 77;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(HclParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(HclParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext[] indexedAttribute() {
			return GetRuleContexts<IndexedAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext indexedAttribute(int i) {
			return GetRuleContext<IndexedAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedReferenceContext[] indexedReference() {
			return GetRuleContexts<IndexedReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedReferenceContext indexedReference(int i) {
			return GetRuleContext<IndexedReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HclParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HclParser.COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 12, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(OPEN_BRACKET);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5242L) != 0)) {
				{
				State = 84;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 80;
					value();
					}
					break;
				case 2:
					{
					State = 81;
					indexedAttribute();
					}
					break;
				case 3:
					{
					State = 82;
					reference();
					}
					break;
				case 4:
					{
					State = 83;
					indexedReference();
					}
					break;
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 86;
					Match(COMMA);
					State = 91;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 87;
						value();
						}
						break;
					case 2:
						{
						State = 88;
						indexedAttribute();
						}
						break;
					case 3:
						{
						State = 89;
						reference();
						}
						break;
					case 4:
						{
						State = 90;
						indexedReference();
						}
						break;
					}
					}
					}
					State = 97;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 100;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(HclParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapEntryContext[] mapEntry() {
			return GetRuleContexts<MapEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapEntryContext mapEntry(int i) {
			return GetRuleContext<MapEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HclParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HclParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(HclParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(HclParser.NEWLINE, i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 14, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(OPEN_BRACE);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING || _la==IDENTIFIER) {
				{
				{
				State = 103;
				mapEntry();
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA || _la==NEWLINE) {
					{
					{
					State = 104;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==NEWLINE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapKeyContext mapKey() {
			return GetRuleContext<MapKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HclParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public MapEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMapEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMapEntry(this);
		}
	}

	[RuleVersion(0)]
	public MapEntryContext mapEntry() {
		MapEntryContext _localctx = new MapEntryContext(Context, State);
		EnterRule(_localctx, 16, RULE_mapEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			mapKey();
			State = 118;
			Match(EQUAL);
			State = 119;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext indexedAttribute() {
			return GetRuleContext<IndexedAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public MapKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMapKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMapKey(this);
		}
	}

	[RuleVersion(0)]
	public MapKeyContext mapKey() {
		MapKeyContext _localctx = new MapKeyContext(Context, State);
		EnterRule(_localctx, 18, RULE_mapKey);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				indexedAttribute();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				reference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(HclParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(HclParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedReferenceContext indexedReference() {
			return GetRuleContext<IndexedReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolationContext interpolation() {
			return GetRuleContext<InterpolationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_value);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				Match(BOOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				Match(STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129;
				Match(NUMBER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130;
				list();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 131;
				map();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 132;
				reference();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 133;
				indexedReference();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 134;
				interpolation();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 135;
				functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		public InterpolationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterInterpolation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitInterpolation(this);
		}
	}

	[RuleVersion(0)]
	public InterpolationContext interpolation() {
		InterpolationContext _localctx = new InterpolationContext(Context, State);
		EnterRule(_localctx, 22, RULE_interpolation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(T__0);
			State = 139;
			expression();
			State = 140;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HclParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HclParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(HclParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(HclParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(HclParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(HclParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(HclParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(HclParser.CLOSE_BRACKET, i);
		}
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(IDENTIFIER);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				State = 150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 143;
					Match(T__1);
					State = 144;
					Match(IDENTIFIER);
					}
					break;
				case 2:
					{
					State = 145;
					Match(T__1);
					State = 146;
					Match(IDENTIFIER);
					State = 147;
					Match(OPEN_BRACKET);
					State = 148;
					Match(STRING);
					State = 149;
					Match(CLOSE_BRACKET);
					}
					break;
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HclParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HclParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(HclParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(HclParser.CLOSE_BRACKET, 0); }
		public IndexedReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterIndexedReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitIndexedReference(this);
		}
	}

	[RuleVersion(0)]
	public IndexedReferenceContext indexedReference() {
		IndexedReferenceContext _localctx = new IndexedReferenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_indexedReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(IDENTIFIER);
			State = 156;
			Match(OPEN_BRACKET);
			State = 157;
			Match(STRING);
			State = 158;
			Match(CLOSE_BRACKET);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 159;
				Match(T__1);
				State = 160;
				Match(IDENTIFIER);
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(HclParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(HclParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HclParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HclParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(IDENTIFIER);
			State = 167;
			Match(OPEN_PAREN);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 5242L) != 0)) {
				{
				State = 168;
				value();
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 169;
					Match(COMMA);
					State = 170;
					value();
					}
					}
					State = 175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 178;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_expression);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				reference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,17,186,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,5,0,34,8,0,10,0,12,0,37,9,0,1,0,1,0,1,1,1,1,1,1,3,1,44,8,
		1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,5,2,53,8,2,10,2,12,2,56,9,2,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,68,8,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,85,8,6,1,6,1,6,1,6,1,6,1,6,3,6,92,8,6,
		5,6,94,8,6,10,6,12,6,97,9,6,3,6,99,8,6,1,6,1,6,1,7,1,7,1,7,5,7,106,8,7,
		10,7,12,7,109,9,7,5,7,111,8,7,10,7,12,7,114,9,7,1,7,1,7,1,8,1,8,1,8,1,
		8,1,9,1,9,1,9,1,9,3,9,126,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,137,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,5,12,151,8,12,10,12,12,12,154,9,12,1,13,1,13,1,13,1,13,1,13,1,
		13,5,13,162,8,13,10,13,12,13,165,9,13,1,14,1,14,1,14,1,14,1,14,5,14,172,
		8,14,10,14,12,14,175,9,14,3,14,177,8,14,1,14,1,14,1,15,1,15,1,15,3,15,
		184,8,15,1,15,0,0,16,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,1,1,
		0,16,17,204,0,35,1,0,0,0,2,40,1,0,0,0,4,54,1,0,0,0,6,67,1,0,0,0,8,69,1,
		0,0,0,10,74,1,0,0,0,12,79,1,0,0,0,14,102,1,0,0,0,16,117,1,0,0,0,18,125,
		1,0,0,0,20,136,1,0,0,0,22,138,1,0,0,0,24,142,1,0,0,0,26,155,1,0,0,0,28,
		166,1,0,0,0,30,183,1,0,0,0,32,34,3,2,1,0,33,32,1,0,0,0,34,37,1,0,0,0,35,
		33,1,0,0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,35,1,0,0,0,38,39,5,0,0,1,39,
		1,1,0,0,0,40,41,5,6,0,0,41,43,5,4,0,0,42,44,5,4,0,0,43,42,1,0,0,0,43,44,
		1,0,0,0,44,45,1,0,0,0,45,46,5,10,0,0,46,47,3,4,2,0,47,48,5,11,0,0,48,3,
		1,0,0,0,49,53,3,6,3,0,50,53,3,10,5,0,51,53,5,7,0,0,52,49,1,0,0,0,52,50,
		1,0,0,0,52,51,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,5,1,
		0,0,0,56,54,1,0,0,0,57,58,5,6,0,0,58,59,5,9,0,0,59,68,3,20,10,0,60,61,
		5,6,0,0,61,62,5,9,0,0,62,68,3,14,7,0,63,64,3,8,4,0,64,65,5,9,0,0,65,66,
		3,20,10,0,66,68,1,0,0,0,67,57,1,0,0,0,67,60,1,0,0,0,67,63,1,0,0,0,68,7,
		1,0,0,0,69,70,5,6,0,0,70,71,5,12,0,0,71,72,5,4,0,0,72,73,5,13,0,0,73,9,
		1,0,0,0,74,75,5,6,0,0,75,76,5,10,0,0,76,77,3,4,2,0,77,78,5,11,0,0,78,11,
		1,0,0,0,79,98,5,12,0,0,80,85,3,20,10,0,81,85,3,8,4,0,82,85,3,24,12,0,83,
		85,3,26,13,0,84,80,1,0,0,0,84,81,1,0,0,0,84,82,1,0,0,0,84,83,1,0,0,0,85,
		95,1,0,0,0,86,91,5,16,0,0,87,92,3,20,10,0,88,92,3,8,4,0,89,92,3,24,12,
		0,90,92,3,26,13,0,91,87,1,0,0,0,91,88,1,0,0,0,91,89,1,0,0,0,91,90,1,0,
		0,0,92,94,1,0,0,0,93,86,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,
		0,0,96,99,1,0,0,0,97,95,1,0,0,0,98,84,1,0,0,0,98,99,1,0,0,0,99,100,1,0,
		0,0,100,101,5,13,0,0,101,13,1,0,0,0,102,112,5,10,0,0,103,107,3,16,8,0,
		104,106,7,0,0,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,
		1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,110,103,1,0,0,0,111,114,1,0,0,
		0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,112,1,0,0,0,115,
		116,5,11,0,0,116,15,1,0,0,0,117,118,3,18,9,0,118,119,5,9,0,0,119,120,3,
		20,10,0,120,17,1,0,0,0,121,126,5,4,0,0,122,126,5,6,0,0,123,126,3,8,4,0,
		124,126,3,24,12,0,125,121,1,0,0,0,125,122,1,0,0,0,125,123,1,0,0,0,125,
		124,1,0,0,0,126,19,1,0,0,0,127,137,5,3,0,0,128,137,5,4,0,0,129,137,5,5,
		0,0,130,137,3,12,6,0,131,137,3,14,7,0,132,137,3,24,12,0,133,137,3,26,13,
		0,134,137,3,22,11,0,135,137,3,28,14,0,136,127,1,0,0,0,136,128,1,0,0,0,
		136,129,1,0,0,0,136,130,1,0,0,0,136,131,1,0,0,0,136,132,1,0,0,0,136,133,
		1,0,0,0,136,134,1,0,0,0,136,135,1,0,0,0,137,21,1,0,0,0,138,139,5,1,0,0,
		139,140,3,30,15,0,140,141,5,11,0,0,141,23,1,0,0,0,142,152,5,6,0,0,143,
		144,5,2,0,0,144,151,5,6,0,0,145,146,5,2,0,0,146,147,5,6,0,0,147,148,5,
		12,0,0,148,149,5,4,0,0,149,151,5,13,0,0,150,143,1,0,0,0,150,145,1,0,0,
		0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,25,1,0,0,0,154,152,
		1,0,0,0,155,156,5,6,0,0,156,157,5,12,0,0,157,158,5,4,0,0,158,163,5,13,
		0,0,159,160,5,2,0,0,160,162,5,6,0,0,161,159,1,0,0,0,162,165,1,0,0,0,163,
		161,1,0,0,0,163,164,1,0,0,0,164,27,1,0,0,0,165,163,1,0,0,0,166,167,5,6,
		0,0,167,176,5,14,0,0,168,173,3,20,10,0,169,170,5,16,0,0,170,172,3,20,10,
		0,171,169,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,
		177,1,0,0,0,175,173,1,0,0,0,176,168,1,0,0,0,176,177,1,0,0,0,177,178,1,
		0,0,0,178,179,5,15,0,0,179,29,1,0,0,0,180,184,3,24,12,0,181,184,3,28,14,
		0,182,184,3,20,10,0,183,180,1,0,0,0,183,181,1,0,0,0,183,182,1,0,0,0,184,
		31,1,0,0,0,19,35,43,52,54,67,84,91,95,98,107,112,125,136,150,152,163,173,
		176,183
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
