//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Hcl.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class HclParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, BOOL=6, STRING=7, NUMBER=8, PORT_RANGE=9, 
		IDENTIFIER=10, COMMENT=11, COMMENT_MULTI=12, WHITESPACE=13, EQUAL=14, 
		OPEN_BRACE=15, CLOSE_BRACE=16, OPEN_BRACKET=17, CLOSE_BRACKET=18, OPEN_PAREN=19, 
		CLOSE_PAREN=20, COMMA=21, NEWLINE=22;
	public const int
		RULE_document = 0, RULE_block = 1, RULE_blockLabel = 2, RULE_body = 3, 
		RULE_attribute = 4, RULE_nestedBlock = 5, RULE_indexedAttribute = 6, RULE_list = 7, 
		RULE_map = 8, RULE_mapEntry = 9, RULE_mapKey = 10, RULE_multilineString = 11, 
		RULE_value = 12, RULE_interpolation = 13, RULE_reference = 14, RULE_indexedReference = 15, 
		RULE_functionCall = 16, RULE_expression = 17;
	public static readonly string[] ruleNames = {
		"document", "block", "blockLabel", "body", "attribute", "nestedBlock", 
		"indexedAttribute", "list", "map", "mapEntry", "mapKey", "multilineString", 
		"value", "interpolation", "reference", "indexedReference", "functionCall", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<<-'", "'null'", "'${'", "'.'", "'*'", null, null, null, null, 
		null, null, null, null, "'='", "'{'", "'}'", "'['", "']'", "'('", "')'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "BOOL", "STRING", "NUMBER", "PORT_RANGE", 
		"IDENTIFIER", "COMMENT", "COMMENT_MULTI", "WHITESPACE", "EQUAL", "OPEN_BRACE", 
		"CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", 
		"COMMA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hcl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HclParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HclParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HclParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HclParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 36;
				block();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 42;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(HclParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockLabelContext blockLabel() {
			return GetRuleContext<BlockLabelContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(IDENTIFIER);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 45;
				blockLabel();
				}
			}

			State = 48;
			Match(OPEN_BRACE);
			State = 49;
			body();
			State = 50;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(HclParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(HclParser.STRING, i);
		}
		public BlockLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterBlockLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitBlockLabel(this);
		}
	}

	[RuleVersion(0)]
	public BlockLabelContext blockLabel() {
		BlockLabelContext _localctx = new BlockLabelContext(Context, State);
		EnterRule(_localctx, 4, RULE_blockLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 52;
				Match(STRING);
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedBlockContext[] nestedBlock() {
			return GetRuleContexts<NestedBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedBlockContext nestedBlock(int i) {
			return GetRuleContext<NestedBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(HclParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(HclParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_MULTI() { return GetTokens(HclParser.COMMENT_MULTI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_MULTI(int i) {
			return GetToken(HclParser.COMMENT_MULTI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(HclParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(HclParser.NEWLINE, i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4201472L) != 0)) {
				{
				State = 62;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 57;
					attribute();
					}
					break;
				case 2:
					{
					State = 58;
					nestedBlock();
					}
					break;
				case 3:
					{
					State = 59;
					Match(COMMENT);
					}
					break;
				case 4:
					{
					State = 60;
					Match(COMMENT_MULTI);
					}
					break;
				case 5:
					{
					State = 61;
					Match(NEWLINE);
					}
					break;
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HclParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(IDENTIFIER);
			State = 68;
			Match(EQUAL);
			State = 69;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(HclParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockLabelContext blockLabel() {
			return GetRuleContext<BlockLabelContext>(0);
		}
		public NestedBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterNestedBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitNestedBlock(this);
		}
	}

	[RuleVersion(0)]
	public NestedBlockContext nestedBlock() {
		NestedBlockContext _localctx = new NestedBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_nestedBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(IDENTIFIER);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 72;
				blockLabel();
				}
			}

			State = 75;
			Match(OPEN_BRACE);
			State = 76;
			body();
			State = 77;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(HclParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(HclParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(HclParser.NUMBER, 0); }
		public IndexedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterIndexedAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitIndexedAttribute(this);
		}
	}

	[RuleVersion(0)]
	public IndexedAttributeContext indexedAttribute() {
		IndexedAttributeContext _localctx = new IndexedAttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_indexedAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(IDENTIFIER);
			State = 80;
			Match(OPEN_BRACKET);
			State = 81;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 82;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(HclParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(HclParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext[] indexedAttribute() {
			return GetRuleContexts<IndexedAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext indexedAttribute(int i) {
			return GetRuleContext<IndexedAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedReferenceContext[] indexedReference() {
			return GetRuleContexts<IndexedReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedReferenceContext indexedReference(int i) {
			return GetRuleContext<IndexedReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PORT_RANGE() { return GetTokens(HclParser.PORT_RANGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_RANGE(int i) {
			return GetToken(HclParser.PORT_RANGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HclParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HclParser.COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 14, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(OPEN_BRACKET);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 165838L) != 0)) {
				{
				State = 90;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 85;
					value();
					}
					break;
				case 2:
					{
					State = 86;
					indexedAttribute();
					}
					break;
				case 3:
					{
					State = 87;
					reference();
					}
					break;
				case 4:
					{
					State = 88;
					indexedReference();
					}
					break;
				case 5:
					{
					State = 89;
					Match(PORT_RANGE);
					}
					break;
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 92;
					Match(COMMA);
					State = 98;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 93;
						value();
						}
						break;
					case 2:
						{
						State = 94;
						indexedAttribute();
						}
						break;
					case 3:
						{
						State = 95;
						reference();
						}
						break;
					case 4:
						{
						State = 96;
						indexedReference();
						}
						break;
					case 5:
						{
						State = 97;
						Match(PORT_RANGE);
						}
						break;
					}
					}
					}
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 107;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(HclParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapEntryContext[] mapEntry() {
			return GetRuleContexts<MapEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapEntryContext mapEntry(int i) {
			return GetRuleContext<MapEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HclParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HclParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(HclParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(HclParser.NEWLINE, i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 16, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(OPEN_BRACE);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING || _la==IDENTIFIER) {
				{
				{
				State = 110;
				mapEntry();
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA || _la==NEWLINE) {
					{
					{
					State = 111;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==NEWLINE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapKeyContext mapKey() {
			return GetRuleContext<MapKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HclParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public MapEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMapEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMapEntry(this);
		}
	}

	[RuleVersion(0)]
	public MapEntryContext mapEntry() {
		MapEntryContext _localctx = new MapEntryContext(Context, State);
		EnterRule(_localctx, 18, RULE_mapEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			mapKey();
			State = 125;
			Match(EQUAL);
			State = 126;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexedAttributeContext indexedAttribute() {
			return GetRuleContext<IndexedAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public MapKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMapKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMapKey(this);
		}
	}

	[RuleVersion(0)]
	public MapKeyContext mapKey() {
		MapKeyContext _localctx = new MapKeyContext(Context, State);
		EnterRule(_localctx, 20, RULE_mapKey);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				indexedAttribute();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131;
				reference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultilineStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HclParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HclParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(HclParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(HclParser.NEWLINE, i);
		}
		public MultilineStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multilineString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterMultilineString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitMultilineString(this);
		}
	}

	[RuleVersion(0)]
	public MultilineStringContext multilineString() {
		MultilineStringContext _localctx = new MultilineStringContext(Context, State);
		EnterRule(_localctx, 22, RULE_multilineString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(T__0);
			State = 135;
			Match(IDENTIFIER);
			State = 136;
			Match(NEWLINE);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4194302L) != 0)) {
				{
				{
				State = 137;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			Match(NEWLINE);
			State = 144;
			Match(IDENTIFIER);
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 145;
				Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(HclParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultilineStringContext multilineString() {
			return GetRuleContext<MultilineStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(HclParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_RANGE() { return GetToken(HclParser.PORT_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexedReferenceContext indexedReference() {
			return GetRuleContext<IndexedReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolationContext interpolation() {
			return GetRuleContext<InterpolationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_value);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				Match(BOOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				Match(STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150;
				multilineString();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 151;
				Match(NUMBER);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 152;
				Match(PORT_RANGE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 153;
				list();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 154;
				map();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 155;
				reference();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 156;
				indexedReference();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 157;
				interpolation();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 158;
				functionCall();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 159;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(HclParser.CLOSE_BRACE, 0); }
		public InterpolationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterInterpolation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitInterpolation(this);
		}
	}

	[RuleVersion(0)]
	public InterpolationContext interpolation() {
		InterpolationContext _localctx = new InterpolationContext(Context, State);
		EnterRule(_localctx, 26, RULE_interpolation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T__2);
			State = 163;
			expression();
			State = 164;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HclParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HclParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(HclParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(HclParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(HclParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(HclParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(HclParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(HclParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(HclParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(HclParser.NUMBER, i);
		}
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(IDENTIFIER);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 167;
					Match(T__3);
					State = 168;
					Match(IDENTIFIER);
					}
					break;
				case 2:
					{
					State = 169;
					Match(T__3);
					State = 170;
					Match(T__4);
					}
					break;
				case 3:
					{
					State = 171;
					Match(T__3);
					State = 172;
					Match(IDENTIFIER);
					State = 173;
					Match(OPEN_BRACKET);
					State = 174;
					_la = TokenStream.LA(1);
					if ( !(_la==STRING || _la==NUMBER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 175;
					Match(CLOSE_BRACKET);
					}
					break;
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexedReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(HclParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HclParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(HclParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(HclParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(HclParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(HclParser.NUMBER, 0); }
		public IndexedReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexedReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterIndexedReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitIndexedReference(this);
		}
	}

	[RuleVersion(0)]
	public IndexedReferenceContext indexedReference() {
		IndexedReferenceContext _localctx = new IndexedReferenceContext(Context, State);
		EnterRule(_localctx, 30, RULE_indexedReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(IDENTIFIER);
			State = 182;
			Match(OPEN_BRACKET);
			State = 183;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 416L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 184;
			Match(CLOSE_BRACKET);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 185;
				Match(T__3);
				State = 186;
				Match(IDENTIFIER);
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(HclParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(HclParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(HclParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HclParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HclParser.COMMA, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(IDENTIFIER);
			State = 193;
			Match(OPEN_PAREN);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 165838L) != 0)) {
				{
				State = 194;
				value();
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 195;
					Match(COMMA);
					State = 196;
					value();
					}
					}
					State = 201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 204;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHclListener typedListener = listener as IHclListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_expression);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				reference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,212,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,5,0,38,8,0,10,0,12,0,41,9,0,1,0,1,0,
		1,1,1,1,3,1,47,8,1,1,1,1,1,1,1,1,1,1,2,4,2,54,8,2,11,2,12,2,55,1,3,1,3,
		1,3,1,3,1,3,5,3,63,8,3,10,3,12,3,66,9,3,1,4,1,4,1,4,1,4,1,5,1,5,3,5,74,
		8,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,91,
		8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,99,8,7,5,7,101,8,7,10,7,12,7,104,9,7,3,
		7,106,8,7,1,7,1,7,1,8,1,8,1,8,5,8,113,8,8,10,8,12,8,116,9,8,5,8,118,8,
		8,10,8,12,8,121,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,133,
		8,10,1,11,1,11,1,11,1,11,5,11,139,8,11,10,11,12,11,142,9,11,1,11,1,11,
		1,11,3,11,147,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,3,12,161,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,5,14,177,8,14,10,14,12,14,180,9,14,1,15,1,15,1,15,
		1,15,1,15,1,15,5,15,188,8,15,10,15,12,15,191,9,15,1,16,1,16,1,16,1,16,
		1,16,5,16,198,8,16,10,16,12,16,201,9,16,3,16,203,8,16,1,16,1,16,1,17,1,
		17,1,17,3,17,210,8,17,1,17,0,0,18,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,0,4,1,0,7,8,1,0,21,22,1,0,22,22,2,0,5,5,7,8,238,0,39,1,0,0,
		0,2,44,1,0,0,0,4,53,1,0,0,0,6,64,1,0,0,0,8,67,1,0,0,0,10,71,1,0,0,0,12,
		79,1,0,0,0,14,84,1,0,0,0,16,109,1,0,0,0,18,124,1,0,0,0,20,132,1,0,0,0,
		22,134,1,0,0,0,24,160,1,0,0,0,26,162,1,0,0,0,28,166,1,0,0,0,30,181,1,0,
		0,0,32,192,1,0,0,0,34,209,1,0,0,0,36,38,3,2,1,0,37,36,1,0,0,0,38,41,1,
		0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,42,1,0,0,0,41,39,1,0,0,0,42,43,5,
		0,0,1,43,1,1,0,0,0,44,46,5,10,0,0,45,47,3,4,2,0,46,45,1,0,0,0,46,47,1,
		0,0,0,47,48,1,0,0,0,48,49,5,15,0,0,49,50,3,6,3,0,50,51,5,16,0,0,51,3,1,
		0,0,0,52,54,5,7,0,0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,
		0,0,0,56,5,1,0,0,0,57,63,3,8,4,0,58,63,3,10,5,0,59,63,5,11,0,0,60,63,5,
		12,0,0,61,63,5,22,0,0,62,57,1,0,0,0,62,58,1,0,0,0,62,59,1,0,0,0,62,60,
		1,0,0,0,62,61,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,7,1,
		0,0,0,66,64,1,0,0,0,67,68,5,10,0,0,68,69,5,14,0,0,69,70,3,24,12,0,70,9,
		1,0,0,0,71,73,5,10,0,0,72,74,3,4,2,0,73,72,1,0,0,0,73,74,1,0,0,0,74,75,
		1,0,0,0,75,76,5,15,0,0,76,77,3,6,3,0,77,78,5,16,0,0,78,11,1,0,0,0,79,80,
		5,10,0,0,80,81,5,17,0,0,81,82,7,0,0,0,82,83,5,18,0,0,83,13,1,0,0,0,84,
		105,5,17,0,0,85,91,3,24,12,0,86,91,3,12,6,0,87,91,3,28,14,0,88,91,3,30,
		15,0,89,91,5,9,0,0,90,85,1,0,0,0,90,86,1,0,0,0,90,87,1,0,0,0,90,88,1,0,
		0,0,90,89,1,0,0,0,91,102,1,0,0,0,92,98,5,21,0,0,93,99,3,24,12,0,94,99,
		3,12,6,0,95,99,3,28,14,0,96,99,3,30,15,0,97,99,5,9,0,0,98,93,1,0,0,0,98,
		94,1,0,0,0,98,95,1,0,0,0,98,96,1,0,0,0,98,97,1,0,0,0,99,101,1,0,0,0,100,
		92,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,106,1,0,
		0,0,104,102,1,0,0,0,105,90,1,0,0,0,105,106,1,0,0,0,106,107,1,0,0,0,107,
		108,5,18,0,0,108,15,1,0,0,0,109,119,5,15,0,0,110,114,3,18,9,0,111,113,
		7,1,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,
		0,115,118,1,0,0,0,116,114,1,0,0,0,117,110,1,0,0,0,118,121,1,0,0,0,119,
		117,1,0,0,0,119,120,1,0,0,0,120,122,1,0,0,0,121,119,1,0,0,0,122,123,5,
		16,0,0,123,17,1,0,0,0,124,125,3,20,10,0,125,126,5,14,0,0,126,127,3,24,
		12,0,127,19,1,0,0,0,128,133,5,7,0,0,129,133,5,10,0,0,130,133,3,12,6,0,
		131,133,3,28,14,0,132,128,1,0,0,0,132,129,1,0,0,0,132,130,1,0,0,0,132,
		131,1,0,0,0,133,21,1,0,0,0,134,135,5,1,0,0,135,136,5,10,0,0,136,140,5,
		22,0,0,137,139,8,2,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,
		140,141,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,144,5,22,0,0,144,146,
		5,10,0,0,145,147,5,22,0,0,146,145,1,0,0,0,146,147,1,0,0,0,147,23,1,0,0,
		0,148,161,5,6,0,0,149,161,5,7,0,0,150,161,3,22,11,0,151,161,5,8,0,0,152,
		161,5,9,0,0,153,161,3,14,7,0,154,161,3,16,8,0,155,161,3,28,14,0,156,161,
		3,30,15,0,157,161,3,26,13,0,158,161,3,32,16,0,159,161,5,2,0,0,160,148,
		1,0,0,0,160,149,1,0,0,0,160,150,1,0,0,0,160,151,1,0,0,0,160,152,1,0,0,
		0,160,153,1,0,0,0,160,154,1,0,0,0,160,155,1,0,0,0,160,156,1,0,0,0,160,
		157,1,0,0,0,160,158,1,0,0,0,160,159,1,0,0,0,161,25,1,0,0,0,162,163,5,3,
		0,0,163,164,3,34,17,0,164,165,5,16,0,0,165,27,1,0,0,0,166,178,5,10,0,0,
		167,168,5,4,0,0,168,177,5,10,0,0,169,170,5,4,0,0,170,177,5,5,0,0,171,172,
		5,4,0,0,172,173,5,10,0,0,173,174,5,17,0,0,174,175,7,0,0,0,175,177,5,18,
		0,0,176,167,1,0,0,0,176,169,1,0,0,0,176,171,1,0,0,0,177,180,1,0,0,0,178,
		176,1,0,0,0,178,179,1,0,0,0,179,29,1,0,0,0,180,178,1,0,0,0,181,182,5,10,
		0,0,182,183,5,17,0,0,183,184,7,3,0,0,184,189,5,18,0,0,185,186,5,4,0,0,
		186,188,5,10,0,0,187,185,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,
		1,0,0,0,190,31,1,0,0,0,191,189,1,0,0,0,192,193,5,10,0,0,193,202,5,19,0,
		0,194,199,3,24,12,0,195,196,5,21,0,0,196,198,3,24,12,0,197,195,1,0,0,0,
		198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,203,1,0,0,0,201,199,
		1,0,0,0,202,194,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,5,20,0,
		0,205,33,1,0,0,0,206,210,3,28,14,0,207,210,3,32,16,0,208,210,3,24,12,0,
		209,206,1,0,0,0,209,207,1,0,0,0,209,208,1,0,0,0,210,35,1,0,0,0,22,39,46,
		55,62,64,73,90,98,102,105,114,119,132,140,146,160,176,178,189,199,202,
		209
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
